// SPDX-License-Identifier: AGPL-3.0-only
pragma solidity >=0.8.4;

import {SVG} from "../utils/SVG.sol";
import {JSON} from "../utils/JSON.sol";

import {Missions} from "../Missions.sol";
import {IMissions} from "../interface/IMissions.sol";
import {IStorage} from "../interface/IStorage.sol";
import {IQuest} from "../interface/IQuest.sol";
import {Storage} from "../Storage.sol";
// import {IQuest, QuestDetail} from "../interface/IQuest.sol";
import {pERC1155} from "../utils/pERC1155.sol";
import {IKaliCurve, CurveType} from "../interface/IKaliCurve.sol";

/// @title Impact NFTs
/// @notice SVG NFTs displaying impact generated by users' journeys.
/// Major inspiration from Kali, Async.art
contract SupportCurves is Storage {
    /// -----------------------------------------------------------------------
    /// Custom Error
    /// -----------------------------------------------------------------------

    error NotAuthorized();

    /// -----------------------------------------------------------------------
    /// Storage
    /// -----------------------------------------------------------------------

    address public dao;
    address public kaliCurve;
    address public quest;

    mapping(address => uint256) userCurveCount;
    mapping(address => uint256[]) userCurves;

    /// -----------------------------------------------------------------------
    /// Constructor & Modifier
    /// -----------------------------------------------------------------------

    constructor(address _dao) {
        dao = _dao;
    }

    modifier onlyDao() {
        if (dao != msg.sender) revert NotAuthorized();
        _;
    }

    modifier onlyActiveQuest(address user, address missions, uint256 missionId) {
        if (IQuest(quest).isQuestActive(user, missions, missionId)) revert NotAuthorized();
        _;
    }

    /// -----------------------------------------------------------------------
    /// DAO Logic
    /// -----------------------------------------------------------------------

    function setQuest(address _quest) external payable onlyDao {
        quest = _quest;
    }

    function setKaliCurve(address _kaliCurve) external payable onlyDao {
        kaliCurve = _kaliCurve;
    }

    /// -----------------------------------------------------------------------
    /// Steward Setter Logic
    /// -----------------------------------------------------------------------

    function setSupportLogic(
        address user,
        uint256 curveId,
        address missions,
        uint256 missionId,
        CurveType curveType,
        uint256 minSupplyToBurn,
        uint256 constant_a,
        uint256 constant_b,
        uint256 constant_c,
        bool sale,
        string calldata detail
    ) external payable onlyActiveQuest(user, missions, missionId) {
        ++userCurveCount[user];

        uint256 _curveId = IKaliCurve(kaliCurve).curve(
            curveId, curveType, minSupplyToBurn, constant_a, constant_b, constant_c, sale, detail
        );

        userCurves[user].push(_curveId);
    }

    /// -----------------------------------------------------------------------
    /// Steward Getter Logic
    /// -----------------------------------------------------------------------

    function getUserCurves(address user) external view returns (uint256[] memory) {
        uint256[] memory curveIds;
        uint256 length = userCurveCount[user];

        for (uint256 i = 0; i < length;) {
            curveIds[i] = userCurves[user][i];

            unchecked {
                ++i;
            }
        }

        return curveIds;
    }

    /// -----------------------------------------------------------------------
    /// Patron Logic
    /// -----------------------------------------------------------------------

    function subscribe(uint256 curveId) external payable {
        if (!IKaliCurve(kaliCurve).getCurveMintStatus(curveId)) revert NotAuthorized();
        IKaliCurve(kaliCurve).mint(curveId, msg.sender);
    }

    function unsubscribe(uint256 curveId) external payable {
        if (!IKaliCurve(kaliCurve).getCurveMintStatus(curveId)) revert NotAuthorized();
        IKaliCurve(kaliCurve).burn(curveId, msg.sender);
    }
}
